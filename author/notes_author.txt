const HDWalletProvider = require("@truffle/hdwallet-provider");
require('dotenv').config()
const privateKeys = [`0x${process.env.PRIVATE_KEY}`]
    
    matic: {
      provider: () => new HDWalletProvider(privateKeys, `.....`),
      network_id: 80001,
      confirmations: 2,
      timeoutBlocks: 200,
      skipDryRun: true
    }








.env File
PRIVATE_KEY="b....4.....99......9c...5"
add .env to .gitignore






Network Name: Mumbai Testnet
New RPC URL: https://rpc-mumbai.maticvigil.com/
Chain ID: 80001
Currency Symbol: MATIC
Block Explorer URL: https://polygonscan.com/



//SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.8.7;

contract Simple {
	uint public myNumber = 5;

	function changeNumber(uint _newNumber) external {
		myNumber = _newNumber;
	}
}



a3: be9447a80b901b07fb1381ea796260656a8faa1001fd67cc26459ad9999ccd25



let account;
        const connectMetamask = async () => {
            if(window.ethereum !== "undefined"){
                const accounts = await ethereum.request({method: "eth_requestAccounts"});
                account = accounts[0];
                document.getElementById("accountArea").innerHTML = `Account is: ${account}`;
            }

        }

        const connectContract = async () => {
            const ABI = [
                {
                "inputs": [],
                "name": "myNumber",
                "outputs": [
                    {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function",
                "constant": true
                },
                {
                "inputs": [
                    {
                    "internalType": "uint256",
                    "name": "_newNumber",
                    "type": "uint256"
                    }
                ],
                "name": "changeNumber",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
                }
            ];
            const Address = "0x5F750039E64AAEcfE60c1a657721374f95b26157";
            window.web3 = await new Web3(window.ethereum);
            window.contract = await new window.web3.eth.Contract(ABI, Address);
            document.getElementById("contractArea").innerHTML = "Connection Status: Success";
        }

        const readWord = async () => {
            const data = await window.contract.methods.myNumber().call();
            document.getElementById("dataArea").innerHTML = `Word is: ${data}`;
        }
